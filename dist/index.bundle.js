/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkasteroidsjs"] = self["webpackChunkasteroidsjs"] || []).push([["index"],{

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/canvas */ \"./src/lib/canvas.js\");\n/* harmony import */ var _models_spaceship__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models/spaceship */ \"./src/models/spaceship.js\");\n/* harmony import */ var _models_sound__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/sound */ \"./src/models/sound.js\");\n/* harmony import */ var _models_difficulty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./models/difficulty */ \"./src/models/difficulty.js\");\n\r\n\r\n\r\n\r\n\r\n// Set up scene\r\nconsole.log('loading scene...');\r\nlet canvas = new _lib_canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"](\"game-canvas\")\r\nlet width = canvas.width\r\nlet height = canvas.height\r\n\r\n// Set up High Score\r\nif(!localStorage.getItem('high')) {\r\n    localStorage.setItem('high', 0)\r\n}\r\n\r\n// Reset High Score Button\r\nconst rButton = document.getElementById('reset-high')\r\nrButton.addEventListener('click', function(e) { localStorage.setItem('high', 0); })\r\n\r\n// Set up entities\r\nlet spaceship = new _models_spaceship__WEBPACK_IMPORTED_MODULE_1__[\"default\"](width/2, height/2)\r\n\r\n// Set up sounds\r\nlet sPew = new _models_sound__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"assets/Laser_Shoot.wav\", .1)\r\nlet sBoom = new _models_sound__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"assets/Explosion.wav\", .25)\r\n\r\n// Set up input\r\nlet keys = []\r\n\r\nwindow.onkeyup = (e) => { \r\n    keys[e.code] = false \r\n    pframe = true\r\n}\r\n\r\nwindow.onkeydown = (e) => { \r\n    keys[e.code] = true\r\n    e.preventDefault()\r\n }\r\n\r\n// Set up game variables\r\nconst SPAWNS = [\"TOP\", \"RIGHT\", \"BOTTOM\", \"LEFT\"]\r\nlet paused = true\r\nlet newGame = true\r\nlet pframe = true\r\nlet message = \"Choose your Difficulty.\"\r\nlet difficulty = new _models_difficulty__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()\r\nlet frame;\r\nlet score = 0;\r\nlet lives\r\n\r\n// Set up timing variables\r\nlet GAME_FPS = 60\r\nlet lastTick = performance.now()\r\nlet t = 0\r\nlet dt = .01\r\nlet accumulator = 0\r\nlet timeLastPause = performance.now()\r\n\r\n// Run Game Function\r\nlet startGame = () => {\r\n    queueTick()\r\n}\r\n\r\n// Reset Game Function\r\nlet reset = () => {\r\n    frame = 1\r\n    lives = 2\r\n    paused = true\r\n\r\n    asteroids = []\r\n    bullets = []\r\n\r\n    spaceship.reset(width, height)\r\n}\r\n\r\n// Wait for next frame and call Game Loop\r\nlet queueTick = () => {\r\n    window.requestAnimationFrame(gameTick)\r\n}\r\n\r\n// Game Loop\r\nlet gameTick = () => {\r\n    // Check for Paused\r\n    if (paused) {\r\n        let now = performance.now()\r\n\r\n        if (now - timeLastPause > 1000 && (keys[\"Enter\"] || keys[\"KeyP\"])) {\r\n            pauseGame(paused)\r\n        }\r\n\r\n        if (!newGame) {\r\n            drawMessage()\r\n        }\r\n\r\n    } else {\r\n        // update timing\r\n        updateTiming()\r\n\r\n        // update game variables\r\n        updateGame()\r\n\r\n        // check input\r\n        checkInput()\r\n\r\n        // update physics\r\n        while (accumulator >= dt) {\r\n            updatePhysics()\r\n            accumulator -= dt\r\n        }\r\n\r\n        // render graphics\r\n        renderGraphics()\r\n    }\r\n\r\n    // Check for New Game\r\n    if (newGame) {\r\n        drawMessage()\r\n\r\n        chooseDiff()\r\n    }\r\n\r\n    // queue next gameTick\r\n    queueTick()\r\n}\r\n\r\nlet updateTiming = () => {\r\n    let current = performance.now()\r\n    let elapsed = current - lastTick\r\n    lastTick = current\r\n    accumulator += elapsed\r\n}\r\n\r\nlet updateGame = () => {\r\n    // Update High Score\r\n    if (localStorage.getItem('high') < score) {\r\n        localStorage.setItem('high', score)\r\n    }\r\n\r\n    // Frame Counter\r\n    if (frame <= GAME_FPS) {\r\n        frame += 1\r\n    } else {\r\n        frame = 1\r\n    }\r\n\r\n    // Per second score\r\n    if (frame == 60) {\r\n        score++\r\n    }\r\n\r\n    // New Life Check\r\n    if (score % 50 == 0 && frame == 60) {\r\n        lives++\r\n    }\r\n}\r\n\r\nlet checkInput = () => {\r\n    // Ship Rotation\r\n    if (keys[\"KeyA\"] || keys[\"ArrowLeft\"]) {\r\n        spaceship.rotate(-2)\r\n    }\r\n    if (keys[\"KeyD\"] || keys[\"ArrowRight\"]) {\r\n        spaceship.rotate(2)\r\n    }\r\n\r\n    // Ship Acceleration / Deceleration\r\n    if (keys[\"KeyW\"] || keys[\"ArrowUp\"]) {\r\n        spaceship.accelerate(dt)\r\n    }\r\n    if (keys[\"KeyS\"] || keys[\"ArrowDown\"]) {\r\n        spaceship.decelerate(dt)\r\n    }\r\n\r\n    // Pause\r\n    if ( (keys[\"Enter\"] || keys[\"KeyP\"])) {\r\n        let now = performance.now()\r\n\r\n        if (now - timeLastPause > 2000) {\r\n            pauseGame(paused)\r\n        }\r\n    }\r\n\r\n    // Shooting\r\n    if (keys[\"Space\"]) {\r\n        let now = performance.now()\r\n\r\n        if (now - spaceship.timeLastShoot > 250) {\r\n            bullets.push(spaceship.shoot(frame))\r\n            spaceship.timeLastShoot = now\r\n            sPew.play()\r\n        };\r\n    }\r\n}\r\n\r\nlet updatePhysics = () => {\r\n    // Update Scene\r\n    // Asteroid Spawning\r\n    if (asteroids.length < Math.log(score) && frame % 30 == 0) {\r\n        spawnAsteroid()\r\n    }\r\n\r\n\r\n    // Update Positions\r\n    spaceship.updatePosition(width, height, dt)\r\n\r\n    if (bullets.length > 0) {\r\n        for (item in bullets) {\r\n            bullets[item].updatePosition(width, height, dt)\r\n        }\r\n    }\r\n\r\n    if (asteroids.length > 0) {\r\n        for (item in asteroids) {\r\n            asteroids[item].updatePosition(width, height, dt)\r\n        }\r\n        //console.log(asteroids[0])\r\n    }\r\n    //\r\n\r\n    // Check for Collisions\r\n    // Aseteroids and Ship\r\n    for (let i = 0; i < asteroids.length; i++) {\r\n        if (spaceship.checkCollision(asteroids[i])) {\r\n            sBoom.play()\r\n\r\n            if (lives > 0) {\r\n                newLife()\r\n            } else {\r\n                message = \"Game Over. Choose your Difficulty for new game.\"\r\n                newGame = true\r\n                reset()\r\n            }\r\n        }\r\n    }\r\n\r\n    // Asteroids and Bullets\r\n    for (let i = 0; i < bullets.length; i++) {\r\n        for (let j = 0; j < asteroids.length; j++) {\r\n            if (bullets[i].checkCollision(asteroids[j])) {\r\n                bullets.splice(i, 1)\r\n                newA = asteroids[j].split()\r\n\r\n                if (newA == 0) {\r\n                    asteroids.splice(j, 1)\r\n                    score += difficulty.getDiff()\r\n\r\n                    // New Life Check\r\n                    if (score % 150 <= (difficulty.getDiff() - 1)) {\r\n                        lives++\r\n                    }\r\n                } else {\r\n                    asteroids.push(newA[0])\r\n                    asteroids.push(newA[1])\r\n                    asteroids.splice(j, 1)\r\n                }\r\n\r\n                sBoom.play()\r\n\r\n                break\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlet newLife = () => {\r\n    spaceship.reset(width, height)\r\n    lives--\r\n    asteroids = []\r\n    bullets = []\r\n}\r\n\r\nlet pauseGame = (bool) => {\r\n    if (bool) {\r\n        paused = !paused\r\n        message = \"Paused\"\r\n        pframe = false\r\n    } else {\r\n        paused = !paused\r\n        pframe = false\r\n    }\r\n}\r\n\r\nlet spawnAsteroid = () => {\r\n    let sIndex = Math.floor(Math.random() * 4)\r\n    let aSize = Math.floor(Math.random() * 3 + 1)\r\n    let spawnx = 0\r\n    let spawny = 0\r\n    let spawndx = 0\r\n    let spawndy = 0\r\n    let newAsteroid\r\n\r\n    switch (SPAWNS[sIndex]) {\r\n        case \"TOP\":\r\n            spawnx = Math.random() * width\r\n            spawndx = Math.random() * .2\r\n            spawndy = Math.random() * .2\r\n\r\n            spawndx *= Math.floor(Math.random()*2) == 1 ? 1 : -1\r\n\r\n            newAsteroid = new Asteroid(spawnx, 0, spawndx, spawndy, aSize, 6)\r\n\r\n            break;\r\n        case \"RIGHT\":\r\n            spawny = Math.random() * height\r\n            spawndx = Math.random() * -.2\r\n            spawndy = Math.random() * .2\r\n\r\n            spawndy *= Math.floor(Math.random()*2) == 1 ? 1 : -1\r\n\r\n            newAsteroid = new Asteroid(width, spawny, spawndx, spawndy, aSize, 6)\r\n\r\n            break;\r\n        case \"BOTTOM\":\r\n            spawnx = Math.random() * width\r\n            spawndx = Math.random() * .2\r\n            spawndy = Math.random() * -.2\r\n\r\n            spawndx *= Math.floor(Math.random()*2) == 1 ? 1 : -1\r\n\r\n            newAsteroid = new Asteroid(spawnx, height, spawndx, spawndy, aSize, 6)\r\n\r\n            break;\r\n        case \"LEFT\":\r\n            spawny = Math.random() * height\r\n            spawndx = Math.random() * .2\r\n            spawndy = Math.random() * .2\r\n\r\n            spawndy *= Math.floor(Math.random()*2) == 1 ? 1 : -1\r\n\r\n            newAsteroid = new Asteroid(0, spawny, spawndx, spawndy, aSize, 6)\r\n\r\n            break;\r\n    }\r\n\r\n    asteroids.push(newAsteroid)\r\n}\r\n\r\n// Draw Scene\r\nlet renderGraphics = () => {\r\n    canvas.setBackground(\"#000000\")\r\n\r\n    // Draw the spaceship\r\n    canvas.drawSpaceship(spaceship)\r\n\r\n    // Draw the asteroids\r\n    for (let i = 0; i < asteroids.length; i++) {\r\n        canvas.drawAsteroids(asteroids[i], asteroids[i].getBounds())\r\n    }\r\n\r\n    // Draw the bullets\r\n    for (let i = 0; i < bullets.length; i++) {\r\n        if (!bullets[i].checkDistance(frame)) {\r\n            canvas.drawBullets(bullets[i])\r\n        } else {\r\n            bullets.splice(i, 1)\r\n        }\r\n    }\r\n\r\n    // Draw the score\r\n    canvas.drawScore(score)\r\n\r\n    // Draw the High Score\r\n    canvas.drawHigh(localStorage.getItem('high'))\r\n\r\n    // Draw the lives\r\n    canvas.drawLives(lives, spaceship)\r\n}\r\n\r\nlet chooseDiff = () => {\r\n    if((pframe && keys[\"KeyD\"]) || (pframe && keys[\"ArrowRight\"])) {\r\n        difficulty.increaseDiff()\r\n        pframe = false\r\n    }\r\n\r\n    if((pframe && keys[\"KeyA\"]) || (pframe && keys[\"ArrowLeft\"])) {\r\n        difficulty.decreaseDiff()\r\n        pframe = false\r\n    }\r\n\r\n    if((keys[\"Enter\"] || keys[\"Space\"])) {\r\n        newGame = !newGame\r\n        score = 0\r\n        reset()\r\n        pauseGame(false)\r\n    }\r\n\r\n    canvas.drawDiff(difficulty.getDiff())\r\n}\r\n\r\n// Draw Message\r\nlet drawMessage = () => {\r\n    canvas.setBackground(\"#000000\")\r\n    canvas.drawScore(score)\r\n    canvas.drawHigh(localStorage.getItem('high'))\r\n    canvas.drawLives(lives, spaceship)\r\n\r\n    canvas.drawPaused(message)\r\n}\n\n//# sourceURL=webpack://asteroidsjs/./src/index.js?");

/***/ }),

/***/ "./src/lib/canvas.js":
/*!***************************!*\
  !*** ./src/lib/canvas.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction Canvas(id) {\r\n    this.canvas = document.getElementById(id);\r\n    this.context = this.canvas.getContext('2d');\r\n    this.width = this.canvas.width;\r\n    this.height = this.canvas.height;\r\n    \r\n\r\n    this.setBackground = function(color) {\r\n        this.context.fillStyle = color;\r\n        this.context.fillRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    this.drawSpaceship = function(spaceship) {\r\n        this.context.fillStyle = spaceship.color;\r\n        this.context.translate(spaceship.x, spaceship.y);\r\n        this.context.rotate(spaceship.orientation * Math.PI / 180);\r\n        this.context.beginPath();\r\n        this.context.moveTo(0, -spaceship.h/2);\r\n        this.context.lineTo(-spaceship.w/2, spaceship.h/2);\r\n        this.context.lineTo(spaceship.w/2, spaceship.h/2);\r\n        this.context.fill();\r\n        this.context.rotate(-spaceship.orientation * Math.PI / 180);\r\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n    }\r\n\r\n    this.drawAsteroids = function(ast, bounds) {\r\n        this.context.strokeStyle = '#FFFFFF';\r\n        this.context.lineWidth = 1;\r\n        this.context.translate(ast.x, ast.y);\r\n        this.context.beginPath();\r\n        this.context.moveTo(bounds[0].x, bounds[0].y);\r\n        for (var i = 1; i < ast.numSides + 1; i ++) \r\n        {\r\n            this.context.lineTo(bounds[i].x, bounds[i].y);\r\n        };\r\n        this.context.stroke();\r\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    this.drawBullets = function(bul) {\r\n        this.context.fillStyle = '#FFFFFF';\r\n\r\n        this.context.translate(bul.x, bul.y);\r\n        this.context.beginPath();\r\n        this.context.lineTo(-bul.w/2, -bul.h/2);\r\n        this.context.lineTo(bul.w/2, -bul.h/2);\r\n        this.context.lineTo(bul.w/2, bul.h/2);\r\n        this.context.lineTo(-bul.w/2, bul.h/2);\r\n        this.context.fill();\r\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    this.drawScore = function(score) {\r\n        this.context.font = \"20px Turret Road\";\r\n        this.context.fillStyle = \"white\";\r\n        this.context.textAlign = \"center\";\r\n        this.context.fillText(score, this.width / 2, 20);\r\n    }\r\n\r\n    this.drawHigh = function(score) {\r\n        this.context.font = \"20px Turret Road\";\r\n        this.context.fillStyle = \"white\";\r\n        this.context.textAlign = \"right\";\r\n        this.context.fillText(score, this.width - 5, 20);\r\n    }\r\n\r\n    this.drawLives = function(lives, spaceship) {\r\n        var xLoc = spaceship.w;\r\n\r\n        for (i = 0; i < lives; i++) {\r\n            this.context.fillStyle = spaceship.color;\r\n            this.context.translate(xLoc, spaceship.h / 2 + 5);\r\n            this.context.beginPath();\r\n            this.context.moveTo(0, -spaceship.h/2);\r\n            this.context.lineTo(-spaceship.w/2, spaceship.h/2);\r\n            this.context.lineTo(spaceship.w/2, spaceship.h/2);\r\n            this.context.fill();\r\n            this.context.setTransform(1, 0, 0, 1, 0, 0);\r\n\r\n            xLoc += spaceship.w * 2;\r\n        }\r\n    }\r\n\r\n    this.drawPaused = function(message) {\r\n        this.context.font = \"20px Turret Road\";\r\n        this.context.fillStyle = \"white\";\r\n        this.context.textAlign = \"center\";\r\n        this.context.fillText(message, this.width / 2, this.height / 2);\r\n    }\r\n\r\n    this.drawDiff = function(diff) {\r\n        var xpos;\r\n        var rectW;\r\n        if (diff == 1) {\r\n            xpos = this.width / 3;\r\n            rectW = 60;\r\n        } else if (diff ==2) {\r\n            xpos = this.width / 2 - 10;\r\n            rectW = 80;\r\n        } else {\r\n            xpos = this.width * 2 / 3;\r\n            rectW = 60;\r\n        }\r\n        \r\n        this.context.beginPath();\r\n        this.context.strokeStyle = 'white';\r\n        this.context.lineWidth = 1.2;\r\n        this.context.rect(xpos - 30, this.height / 2 + 8, rectW, 30);\r\n        this.context.stroke(); \r\n\r\n        this.context.font = \"20px Turret Road\";\r\n        this.context.fillStyle = \"white\";\r\n        this.context.textAlign = \"center\";\r\n        this.context.fillText(\"Easy\", this.width / 3, this.height / 2 + 30);\r\n        this.context.fillText(\"Normal\", this.width / 2, this.height / 2 + 30);\r\n        this.context.fillText(\"Hard\", this.width * 2 / 3, this.height / 2 + 30);\r\n\r\n  \r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Canvas);\n\n//# sourceURL=webpack://asteroidsjs/./src/lib/canvas.js?");

/***/ }),

/***/ "./src/models/bullet.js":
/*!******************************!*\
  !*** ./src/models/bullet.js ***!
  \******************************/
/***/ (() => {

eval("class Bullet extends Entity {\r\n    constructor(x, y, dx, dy, frame) {\r\n        super(x, y, dx, dy, 0, 0);\r\n        this.h = 4;\r\n        this.w = 4;\r\n        this.frame = frame;\r\n        this.time = 0;\r\n    }\r\n\r\n    // Bound getter for collisions\r\n    getBounds() {\r\n        var p0 = {\r\n            x: this.x - this.w / 2,\r\n            y: this.y - this.h / 2\r\n        }\r\n        var p1 = {\r\n            x: this.x + this.w / 2,\r\n            y: this.y - this.h / 2\r\n        }\r\n        var p2 = {\r\n            x: this.x + this.w / 2,\r\n            y: this.y + this.h / 2\r\n        }\r\n        var p3 = {\r\n            x: this.x - this.w / 2,\r\n            y: this.y + this.h / 2\r\n        }\r\n\r\n        return [p0, p1, p2, p3];\r\n    }\r\n\r\n    // Check distance travelled by frames since creation\r\n    checkDistance(frame) {\r\n        if (this.time < 2 && this.frame == frame) {\r\n            this.time++;\r\n        }\r\n        if (this.time > 1) {\r\n            return true;\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://asteroidsjs/./src/models/bullet.js?");

/***/ }),

/***/ "./src/models/difficulty.js":
/*!**********************************!*\
  !*** ./src/models/difficulty.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Difficulty {\r\n    constructor() {\r\n        this.arr = [1, 2, 3];\r\n        this.diff = this.arr[0];\r\n    }\r\n\r\n    increaseDiff() {\r\n        if (this.diff == this.arr[2]) {\r\n            return;\r\n        } else {\r\n            this.diff++;\r\n        }\r\n    }\r\n\r\n    decreaseDiff() {\r\n        if(this.diff == this.arr[0]) {\r\n            return;\r\n        } else {\r\n            this.diff--;\r\n        }\r\n    }\r\n\r\n    getDiff() {\r\n        return this.diff;\r\n    }\r\n    \r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Difficulty);\n\n//# sourceURL=webpack://asteroidsjs/./src/models/difficulty.js?");

/***/ }),

/***/ "./src/models/entity.js":
/*!******************************!*\
  !*** ./src/models/entity.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Entity {\r\n    constructor(x, y, dx, dy, orientation, jerk) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dx = dx;\r\n        this.dy = dy;\r\n        this.jerk = jerk;\r\n        this.orientation = orientation;\r\n        this.color = \"#000000\";\r\n        this.maxD = .5;\r\n    }\r\n\r\n    getX() {\r\n        return this.x;\r\n    }\r\n\r\n    getY() {\r\n        return this.y;\r\n    }\r\n\r\n    setX(x) {\r\n        this.x = x;\r\n    }\r\n\r\n    setY(y) {\r\n        this.y = y;\r\n    }\r\n\r\n    setO(o) {\r\n        this.orientation = o;\r\n    }\r\n\r\n    setDx(dx) {\r\n        this.dx = dx;\r\n    }\r\n\r\n    setDy(dy) {\r\n        this.dy = dy;\r\n    }\r\n\r\n    updatePosition(width, height, dt) {\r\n        this.x += this.dx * dt;\r\n        this.y += this.dy * dt;\r\n\r\n        if (this.x < 0) {\r\n            this.setX(width);\r\n        }\r\n        if (this.x > width) {\r\n            this.setX(0);\r\n        }\r\n    \r\n        if (this.y < 0) {\r\n            this.setY(height);\r\n        } \r\n        if (this.y > height) {\r\n            this.setY(0);\r\n        }\r\n    }\r\n\r\n    accelerate(dt) {\r\n        var deg = this.mathifyOrientation();\r\n        this.dx += (Math.cos(deg) / this.jerk) * dt;\r\n        this.dy -= (Math.sin(deg) / this.jerk) * dt;\r\n\r\n        // Max Speed Check\r\n        if (this.dx > this.maxD) {\r\n            this.dx = this.maxD;\r\n        }\r\n        if (this.dx < -this.maxD) {\r\n            this.dx = -this.maxD;\r\n        }\r\n        if (this.dy > this.maxD) {\r\n            this.dy = this.maxD;\r\n        }\r\n        if (this.dy < -this.maxD) {\r\n            this.dy = -this.maxD;\r\n        }\r\n    }\r\n\r\n    decelerate(dt) {\r\n        var deg = this.mathifyOrientation();\r\n        this.dx -= (Math.cos(deg) / this.jerk) * dt;\r\n        this.dy += (Math.sin(deg) / this.jerk) * dt;\r\n\r\n        // Max Speed Check\r\n        if (this.dx > this.maxD) {\r\n            this.dx = this.maxD;\r\n        }\r\n        if (this.dx < -this.maxD) {\r\n            this.dx = -this.maxD;\r\n        }\r\n        if (this.dy > this.maxD) {\r\n            this.dy = this.maxD;\r\n        }\r\n        if (this.dy < -this.maxD) {\r\n            this.dy = -this.maxD;\r\n        }\r\n    }\r\n\r\n    mathifyOrientation() {\r\n        // Convert to degrees, then convert to radians.\r\n        return (90 - this.orientation) * (Math.PI / 180);\r\n    }\r\n\r\n    // Positive rotates right, Negative rotates left\r\n    rotate(amount) {\r\n        this.orientation += amount;\r\n    }\r\n\r\n    checkCollision(entity) {\r\n        var thisBounds = this.getBounds();\r\n\r\n        for (let i = 0; i < thisBounds.length; i++) {\r\n            if (thisBounds[i].x > (entity.x - entity.w / 2) &&\r\n                thisBounds[i].x < (entity.x + entity.w / 2) &&\r\n                thisBounds[i].y > (entity.y - entity.h / 2) &&\r\n                thisBounds[i].y < (entity.y + entity.h / 2)) {\r\n                    return true;\r\n                }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Entity);\n\n//# sourceURL=webpack://asteroidsjs/./src/models/entity.js?");

/***/ }),

/***/ "./src/models/sound.js":
/*!*****************************!*\
  !*** ./src/models/sound.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Sound {\r\n    constructor(src, vol) {\r\n        this.sound = document.createElement(\"audio\");\r\n        this.sound.src = src;\r\n        this.sound.volume = vol;\r\n        this.sound.setAttribute(\"preload\", \"auto\");\r\n        this.sound.setAttribute(\"controls\", \"none\");\r\n        this.sound.style.display = \"none\";\r\n        document.body.appendChild(this.sound);\r\n    }\r\n    \r\n    play() {\r\n        this.sound.play();\r\n      }\r\n    stop() {\r\n        this.sound.pause();\r\n      }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sound);\n\n//# sourceURL=webpack://asteroidsjs/./src/models/sound.js?");

/***/ }),

/***/ "./src/models/spaceship.js":
/*!*********************************!*\
  !*** ./src/models/spaceship.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _models_entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/entity */ \"./src/models/entity.js\");\n/* harmony import */ var _models_bullet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/bullet */ \"./src/models/bullet.js\");\n/* harmony import */ var _models_bullet__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_models_bullet__WEBPACK_IMPORTED_MODULE_1__);\n\r\n\r\n\r\nclass Spaceship extends _models_entity__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor(x, y) {\r\n        super(x, y, 0, 0, 0, 10);\r\n        this.h = 20;\r\n        this.w = 12;\r\n        this.color = \"#FFFFFF\";\r\n        this.timeLastShoot = 0\r\n    }\r\n\r\n    reset(w, h) {\r\n        this.setX(w/2);\r\n        this.setY(h/2);\r\n        this.setO(0);\r\n        this.setDx(0);\r\n        this.setDy(0);\r\n    }\r\n\r\n    shoot(frame) {\r\n        var deg = this.mathifyOrientation();\r\n        var dx = Math.cos(deg) * .5;\r\n        var dy = Math.sin(deg) * -.5;\r\n\r\n        return new (_models_bullet__WEBPACK_IMPORTED_MODULE_1___default())(this.x, this.y, dx, dy, frame);\r\n    }\r\n\r\n    getBounds() {\r\n        var p0 = {\r\n            x: this.x,\r\n            y: this.y - this.h / 2\r\n        }\r\n        var p1 = {\r\n            x: this.x + this.w / 2,\r\n            y: this.y + this.h / 2\r\n        }\r\n        var p2 = {\r\n            x: this.x - this.w / 2,\r\n            y: this.y + this.h / 2\r\n        }\r\n        return [p0, p1, p2];\r\n    }\r\n\r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Spaceship);\n\n//# sourceURL=webpack://asteroidsjs/./src/models/spaceship.js?");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./src/index.js"));
/******/ }
]);